"""Initial

Revision ID: ea367f19b479
Revises: 
Create Date: 2025-05-28 13:01:13.232116

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ea367f19b479'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('doctor_specialization')
    op.drop_table('doctor')
    op.drop_table('room')
    op.drop_table('appointment')
    op.drop_table('specialization')
    op.drop_table('patient')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('patient',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('patientid_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('address', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('telephone', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='patient_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('specialization',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('specialization_id'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='specialization_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('appointment',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('appointment_id'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('patient_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('doctor_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('time', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('room_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctor.id'], name=op.f('appointment_doctor_id_fkey')),
    sa.ForeignKeyConstraint(['patient_id'], ['patient.id'], name=op.f('appointment_patient_id_fkey')),
    sa.ForeignKeyConstraint(['room_id'], ['room.id'], name=op.f('appointment_room_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('appointment_pkey'))
    )
    op.create_table('room',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('room_id'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('room_pkey'))
    )
    op.create_table('doctor',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('doctor_id'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='doctor_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('doctor_specialization',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('doctor_specialization_id'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('doctor_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('specialization_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['doctor_id'], ['doctor.id'], name=op.f('doctor_specialization_doctor_id_fkey')),
    sa.ForeignKeyConstraint(['specialization_id'], ['specialization.id'], name=op.f('doctor_specialization_specialization_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('doctor_specialization_pkey'))
    )
    # ### end Alembic commands ###
